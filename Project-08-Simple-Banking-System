#include <iostream>
#include <string>
#include <vector>
#include <iomanip>

// Define a class to represent a bank account
class BankAccount {
private:
    std::string accountNumber;
    std::string accountHolder;
    double balance;

public:
    // Constructor to initialize a new account
    BankAccount(std::string number, std::string holder, double initialBalance = 0.0)
        : accountNumber(number), accountHolder(holder), balance(initialBalance) {}

    // Method to deposit money into the account
    void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            std::cout << "Deposit successful. New balance: $" << balance << std::endl;
        } else {
            std::cout << "Invalid deposit amount." << std::endl;
        }
    }

    // Method to withdraw money from the account
    void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            std::cout << "Withdrawal successful. New balance: $" << balance << std::endl;
        } else if (amount > balance) {
            std::cout << "Insufficient funds." << std::endl;
        } else {
            std::cout << "Invalid withdrawal amount." << std::endl;
        }
    }

    // Method to check the account balance
    void checkBalance() const {
        std::cout << "Current balance: $" << balance << std::endl;
    }

    // Method to get the account number
    std::string getAccountNumber() const {
        return accountNumber;
    }

    // Method to get the account holder's name
    std::string getAccountHolder() const {
        return accountHolder;
    }
};

// Function to display the main menu
void displayMenu() {
    std::cout << "\n===== Banking System Menu =====" << std::endl;
    std::cout << "1. Create a new account" << std::endl;
    std::cout << "2. Deposit money" << std::endl;
    std::cout << "3. Withdraw money" << std::endl;
    std::cout << "4. Check balance" << std::endl;
    std::cout << "5. List all accounts" << std::endl;
    std::cout << "6. Exit" << std::endl;
    std::cout << "===============================" << std::endl;
    std::cout << "Enter your choice: ";
}

int main() {
    // Vector to store all bank accounts
    std::vector<BankAccount> accounts;

    int choice;
    std::string accountNumber, accountHolder;
    double amount;

    // Main program loop
    do {
        displayMenu();
        std::cin >> choice;

        switch (choice) {
            case 1: // Create a new account
                std::cout << "Enter account number: ";
                std::cin >> accountNumber;
                std::cout << "Enter account holder name: ";
                std::cin.ignore(); // Clear the input buffer
                std::getline(std::cin, accountHolder);
                std::cout << "Enter initial balance: $";
                std::cin >> amount;
                accounts.emplace_back(accountNumber, accountHolder, amount);
                std::cout << "Account created successfully." << std::endl;
                break;

            case 2: // Deposit money
            case 3: // Withdraw money
            case 4: // Check balance
                std::cout << "Enter account number: ";
                std::cin >> accountNumber;
                // Find the account with the given account number
                for (auto& account : accounts) {
                    if (account.getAccountNumber() == accountNumber) {
                        if (choice == 2) {
                            std::cout << "Enter deposit amount: $";
                            std::cin >> amount;
                            account.deposit(amount);
                        } else if (choice == 3) {
                            std::cout << "Enter withdrawal amount: $";
                            std::cin >> amount;
                            account.withdraw(amount);
                        } else {
                            account.checkBalance();
                        }
                        break;
                    }
                }
                if (account.getAccountNumber() != accountNumber) {
                    std::cout << "Account not found." << std::endl;
                }
                break;

            case 5: // List all accounts
                std::cout << "\n===== All Accounts =====" << std::endl;
                std::cout << std::left << std::setw(15) << "Account Number" 
                          << std::setw(20) << "Account Holder" << std::endl;
                std::cout << "------------------------" << std::endl;
                for (const auto& account : accounts) {
                    std::cout << std::left << std::setw(15) << account.getAccountNumber() 
                              << std::setw(20) << account.getAccountHolder() << std::endl;
                }
                break;

            case 6: // Exit
                std::cout << "Thank you for using our banking system. Goodbye!" << std::endl;
                break;

            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != 6);

    return 0;
}
OVER
